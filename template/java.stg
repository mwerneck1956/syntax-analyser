group java;

program(name, functions, data) ::= <<
import java.util.ArrayList;
import java.util.Scanner;

<data; separator=";\n">

public class <name> {
    static ArrayList\<Object> returnsList = new ArrayList\<Object>();
    static Scanner scanner = new Scanner(System.in);
    <functions; separator="\n\n">
}
>>

function(returns, name, params, declarations, statements, returnType) ::= <<
public static <returnType> <name>(<params; separator=", ">) {
    <if(declarations)><declarations; separator=";\n">;<endif>
    <if(statements)><statements; separator=";\n">;<endif>
}
>>

data(id,decl) ::= <<
class <id> {
    <decl; separator=";\n">;
}
>>

class_attribute(name, type) ::= <<
 <type> <name> 
>>

public_decl(decl) ::= <<
 public <decl>
>>

param(type, name) ::= "<type> <name>"

return_expr(exprList) ::= <<
<exprList>;
return
>>

returnList (exprList,return ) ::= <<
returnsList.clear();
<exprList; separator=";\n">
>>



return_array_add(value) ::= "returnsList.add(<value>)"



type_array(type) ::= "<type>[]"
type_int() ::= "int"
type_float() ::= "float"
type_bool() ::= "boolean"
type_char() ::= "char"
type_data(id) ::= "<id>"
null() ::= "null"

print(expr) ::= "System.out.print(<expr>)"
read(expr) ::= "<expr> = scanner.nextInt()"

iterate(expr, stmt, count, iterateVarName) ::= <<

for(int <iterateVarName> = 0; <iterateVarName> \< <count> ; <iterateVarName> ++ ) {
    <stmt_list(stmt)>;
}
>>


if(expr, thenExpr, elseExpr) ::= <<
if(<expr>) {
    <thenExpr>;
} <if(elseExpr)> else {
    <elseExpr>;
}
<endif>
>>



stmt_list(stmt) ::= <<
    <stmt;  separator=";\n">
>>

var(var) ::= "<var>"

attribution(var, expr) ::= << 
<var> = <expr> 
>>


lvalue_id(name) ::= "<name>"
lvalue_dot(name,attribute) ::= "<name>.<attribute>"
lvalue(name, array) ::= "<name><array>"
array_access(expr) ::= "[<expr>]"
lvalue_array(name,expr) ::= "<name>[<expr>]"
new(type, expr) ::= "new <type_data(type)><if(expr)>[<expr>]<else>()<endif>"

boolean_expr(value) ::= "<value>"
float_expr(value) ::= "<value>"
int_expr(value) ::= "<value>"
char_expr(value) ::= "'<value>'"

void() ::= "void"
parenthesis_expr(value) ::= << (<value>) >>



new_array(var, type, expr) ::= "<var> = new <type>[<expr>];"

function_call(name, args, receives) ::= <<
<name>(<args; separator=", ">)<if(receives)>;<endif>
<if(receives)><receives; separator=";\n"><endif>
>>

call_variable_assign(id, index, type) ::= <<
<id> = (<type>) returnsList.get(<index>)
>>

call_variable_assign_list(call_variable_assign) ::= <<  
<call_variable_assign; separator=";\n"> 
>>

function_call_assign(name, args, index) ::= <<
<name>(<args; separator=", ">);
_ret.get(<index>)
>>

mult_expression(left_expr, right_expr) ::= "<left_expr> * <right_expr>"
div_expression(left_expr, right_expr) ::= "<left_expr> / <right_expr>"
mod_expression(left_expr, right_expr) ::= "<left_expr> % <right_expr>"
add_expression(left_expr, right_expr) ::= "<left_expr> + <right_expr>"
sub_expression(left_expr, right_expr) ::= "<left_expr> - <right_expr>"


less_than_expr(left_expr, right_expr) ::= "<left_expr> \< <right_expr>"
equals_expr(left_expr, right_expr) ::= "<left_expr> == <right_expr>"
diff_expr(left_expr, right_expr) ::= "<left_expr> != <right_expr>"
and_expr(left_expr, right_expr) ::= "<left_expr> && <right_expr>"
not_expr(expr) ::= "!<expr>"
minus_expr(expr) ::= "(-<expr>)"